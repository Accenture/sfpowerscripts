name: Milestone15$(Rev:.r)

pr:
  branches:
    include:
    - develop
    - master
    - release/*
  paths:
    include:
      - '*' 
    exclude:
      - 'docs/*' 

trigger:
  branches:
    include:
     - release/*
     - develop
  paths:
    exclude:
    - 'docs/*' 


variables:
 - group: Tokens
 - name: major
   value: 15
   
 - name: minor
   value: $[counter(variables['major'], 1)] 
 


stages:

- stage: Development
  dependsOn: []
  condition:  eq(variables['build.Reason'], 'Manual')
  jobs:

  - template: build_templates/deciderjob.yml  

  - deployment: BuildAzPipelines
    displayName: 'Build and Deploy Azure Pipelines Extension to Develop'
    dependsOn: InstallNodeModules
    variables:
      isCoreUpdated: $[ dependencies.InstallNodeModules.outputs['Builddeciderstep.isCoreUpdated'] ]
    timeoutInMinutes: 40
    pool:
      vmImage: 'windows-latest'
    environment: develop
    strategy:
       runOnce:
         deploy:
           steps:

             - template: build_templates/buildazpipelines.yml  
               parameters:
                commitToGit: false
                stageToDeploy: 'dev'
                version: 'dev'
                environmentToDeploy: 'develop'
                toBuild: true
                organization: safebot
                buildNumber: $(minor)
 
             - task: CmdLine@2
               displayName: 'Login to the org'
               inputs:
                     script: |
                      echo $(safebot_pat) | az devops login --org  https://dev.azure.com/safebot

             - task: CmdLine@2
               displayName: 'Uninstall the extension'
               inputs:
                     script: |
                      az devops extension uninstall --extension-id sfpowerscripts-dev  --publisher-id AzlamSalam --org https://dev.azure.com/safebot -y

             - task: CmdLine@2
               displayName: 'Install the new version of the plugin'
               inputs:
                     script: |
                      az devops extension install --extension-id sfpowerscripts-dev  --publisher-id AzlamSalam --org https://dev.azure.com/safebot 

#Pull Request Review : Triggered for any PRs               
- stage: Review
  condition:  eq(variables['build.Reason'], 'PullRequest')
  dependsOn: []
  jobs:

  - template: build_templates/deciderjob.yml  

  - job: BuildCLI
    displayName: 'Build To Validate CLI'
    dependsOn: InstallNodeModules
    condition: and( succeeded('InstallNodeModules'), eq(dependencies.InstallNodeModules.outputs['Builddeciderstep.isCLIUpdated'], true) )
    timeoutInMinutes: 10
    pool:
      vmImage: 'windows-latest'
    steps:
      - template: build_templates/buildcli.yml  
        parameters:
         commitToGit: false
         bump: 'prerelease'
         publish: false   

  - deployment: BuildAzPipelines
    displayName: 'Build and Deploy Azure Pipelines Extension to Review'
    dependsOn: InstallNodeModules
    condition: and(succeeded('InstallNodeModules'), or( eq( dependencies.InstallNodeModules.outputs['Builddeciderstep.isAzurePipelinesUpdated'], true ),  eq( dependencies.InstallNodeModules.outputs['Builddeciderstep.isCoreUpdated'], true )  ))
    variables:
      isCoreUpdated: $[ dependencies.InstallNodeModules.outputs['Builddeciderstep.isCoreUpdated'] ]
    timeoutInMinutes: 40
    pool:
      vmImage: 'windows-latest'
    environment: review
    strategy:
       runOnce:
         deploy:
           steps:

             - template: build_templates/buildazpipelines.yml  
               parameters:
                commitToGit: false
                stageToDeploy: 'review'
                version: 'review'
                environmentToDeploy: 'review'
                toBuild: true
                organization: dxatscale
                buildNumber: $(minor)
  
  - job: WaitPluginToInstallonReview
    displayName: 'Wait for  Plugin To Publish on Review'
    dependsOn: BuildAzPipelines
    pool: server
    steps:
      - task: Delay@1
        inputs:
         delayForMinutes: '2' 

  - job: InstallExtension
    displayName: 'Install Extension to Review'
    dependsOn: WaitPluginToInstallonReview
    pool:
      vmImage: 'ubuntu-latest'
    steps:

    - task: CmdLine@2
      displayName: 'Login to the org'
      inputs:
            script: |
             echo $(dxatscalereview_extension_pat) | az devops login --org  https://dev.azure.com/dxatscalereview

    - task: CmdLine@2
      displayName: 'Uninstall the extension'
      inputs:
            script: |
             az devops extension uninstall --extension-id sfpowerscripts-review  --publisher-id AzlamSalam --org https://dev.azure.com/dxatscalereview -y

    - task: CmdLine@2
      displayName: 'Install the new version of the plugin'
      inputs:
            script: |
             az devops extension install --extension-id sfpowerscripts-review  --publisher-id AzlamSalam --org https://dev.azure.com/dxatscalereview  
   
          
  - job: TestPipelinesPR
    displayName: 'Test pr tasks on dxatscalereview'
    dependsOn: InstallExtension
    pool:
      vmImage: 'windows-latest'
    steps:
   
    - task: benjhuser.tfs-extensions-build-tasks.trigger-build-task.TriggerBuild@3
      displayName: 'Trigger a new build of PR Validation Test in sfpowerscriptsReview'
      continueOnError: true
      inputs:
          definitionIsInCurrentTeamProject: false
          tfsServer: 'https://dev.azure.com/dxatscalereview'
          teamProject: sfpowerscriptsreview
          buildDefinition: 1
          useSameBranch: false
          branchToUse:  $(System.PullRequest.SourceBranch)
          waitForQueuedBuildsToFinish: true
          authenticationMethod: 'Basic Authentication'
          username: 'azlam.abdulsalam'
          password: '$(dxatscalereview_pat)'

  

  - job: TestPipelinesPackaging
    displayName: 'Test packaging tasks on dxatscalereview'
    dependsOn: InstallExtension
    pool:
      vmImage: 'windows-latest'
    steps:

    - powershell: |
       # see also https://github.com/microsoft/azure-pipelines-agent/issues/838
        $SourceBranchLongName = switch ($env:Build_Reason) {
         'PullRequest' { $env:Build_SourceBranch.Replace('refs/pull/','').Replace('/merge','') }
          default { $env:Build_SourceBranch.Replace('refs/heads/','').Replace('refs/tags/','') }
        }
        Write-Debug ${SourceBranchLongName}
        Write-Host "##vso[task.setvariable variable=fullbranchname]${SourceBranchLongName}"
      displayName: Get Branch Name

    - task: benjhuser.tfs-extensions-build-tasks.trigger-build-task.TriggerBuild@3
      displayName: 'Trigger a new build of Packaging Test in sfpowerscriptsReview'
      inputs:
          definitionIsInCurrentTeamProject: false
          tfsServer: 'https://dev.azure.com/dxatscalereview'
          teamProject: sfpowerscriptsreview
          buildDefinition: 2
          useSameBranch: false
          branchToUse: $(System.PullRequest.SourceBranch)
          waitForQueuedBuildsToFinish: true
          authenticationMethod: 'Basic Authentication'
          username: 'azlam.abdulsalam'
          password: '$(dxatscalereview_pat)'

#Merge to Develop, Deploy Alpha builds      
- stage: Alpha
  condition: eq(variables['build.sourceBranch'], 'refs/heads/develop')
  dependsOn: []
  jobs:

  - template: build_templates/deciderjob.yml  

  - job: BuildCLI
    dependsOn: InstallNodeModules
    displayName: sfdx-plugin
    condition:  and( succeeded('InstallNodeModules'), eq(dependencies.InstallNodeModules.outputs['Builddeciderstep.isCLIUpdated'], true) )
    pool:
      vmImage: 'windows-latest'
    steps:
             - template: build_templates/buildcli.yml  
               parameters:
                commitToGit: true
                bump: 'prerelease' 
                version: 'alpha'   
                publish: true
                     

  - deployment: BuildAzPipelines
    displayName: azpipelines
    dependsOn: InstallNodeModules
    condition: and(succeeded('InstallNodeModules'), eq( dependencies.InstallNodeModules.outputs['Builddeciderstep.isAzurePipelinesUpdated'], true ))
    timeoutInMinutes: 20
    pool:
      vmImage: 'windows-latest'
    environment: alpha
    strategy:
       runOnce:
         deploy:
           steps:
    
             - template: build_templates/buildazpipelines.yml  
               parameters:
                commitToGit: true
                bump: 'prerelease' 
                stageToDeploy: 'alpha'
                version: 'alpha'
                environmentToDeploy: 'alpha'
                toBuild: true
                organization: dxatscalereview
                buildNumber: $(minor)
    
              
#Beta Stage
- stage: Beta
  condition: and(succeeded('Alpha'),eq(variables['build.sourceBranch'], 'refs/heads/develop'))
  dependsOn: Alpha
  jobs:

  - template: build_templates/deciderjob.yml  

  - job: BuildCLI
    displayName: sfdx-plugin
    dependsOn: InstallNodeModules
    condition:  and( succeeded('InstallNodeModules'), eq(dependencies.InstallNodeModules.outputs['Builddeciderstep.isCLIUpdated'], true) )
    pool:
      vmImage: 'windows-latest'
    steps:
             - template: build_templates/buildcli.yml  
               parameters:
                commitToGit: false
                bump: 'prerelease'
                version: 'beta'  
                publish: true
                     

  - deployment: BuildAzPipelines
    displayName: azpipelines
    dependsOn: InstallNodeModules
    condition: and(succeeded('InstallNodeModules'), eq( dependencies.InstallNodeModules.outputs['Builddeciderstep.isAzurePipelinesUpdated'], true ))
    timeoutInMinutes: 20
    pool:
      vmImage: 'windows-latest'
    environment: beta
    strategy:
       runOnce:
         deploy:
           steps:
    
             - template: build_templates/buildazpipelines.yml  
               parameters:
                commitToGit: false
                bump: 'prerelease'
                stageToDeploy: 'beta'
                version: 'beta'
                environmentToDeploy: 'beta'
                toBuild: true
                organization: dxatscalereview
                buildNumber: $(minor)

#Prod Stage
- stage: Prod
  condition: and(succeeded('Beta'),eq(variables['build.sourceBranch'], 'refs/heads/develop'))
  dependsOn: Beta
  jobs:

  - template: build_templates/deciderjob.yml  

  - job: BuildCLI
    displayName: sfdx-plugin
    dependsOn: InstallNodeModules
    condition:  and( succeeded('InstallNodeModules'), eq(dependencies.InstallNodeModules.outputs['Builddeciderstep.isCLIUpdated'], true) )
    pool:
      vmImage: 'windows-latest'
    steps:
             - template: build_templates/buildcli.yml  
               parameters:
                commitToGit: false
                bump: 'patch'
                version: 'prod'  
                publish: true
                     

  - deployment: BuildAzPipelines
    displayName: azpipelines
    dependsOn: BuildCLI
    condition: and(succeeded('InstallNodeModules'), eq( dependencies.InstallNodeModules.outputs['Builddeciderstep.isAzurePipelinesUpdated'], true ))
    timeoutInMinutes: 30
    pool:
      vmImage: 'windows-latest'
    environment: prod
    strategy:
       runOnce:
         deploy:
           steps:
    
             - template: build_templates/buildazpipelines.yml  
               parameters:
                commitToGit: false
                bump: 'patch'
                stageToDeploy: 'prod'
                version: 'prod'
                environmentToDeploy: 'prod'
                toBuild: true
                organization: dxatscalereview
                buildNumber: $(minor)
