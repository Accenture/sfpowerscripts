parameters:

  - name: commitToGit
    type: boolean
    default: false

  - name: stageToDeploy
    type: string
    default: review

  - name: version
    type: string
    default: auto

  - name: environmentToDeploy
    type: string
    default: development

  - name: organization
    type: string
    default: ''


  - name: buildNumber
    type: string
    default: ''

  - name: toBuild
    type: boolean
    default: false

  - name: bump
    type: string
    default: 'patch'

  - name: publish
    type: boolean
    default: false



steps:
          - checkout: self


          - powershell: |
              # see also https://github.com/microsoft/azure-pipelines-agent/issues/838
              $SourceBranchLongName = switch ($env:Build_Reason) {
                'PullRequest' { $env:Build_SourceBranch.Replace('refs/pull/','').Replace('/merge','') }
                 default { $env:Build_SourceBranch.Replace('refs/heads/','').Replace('refs/tags/','') }
               }
               Write-Host "##vso[task.setvariable variable=fullbranchname]${SourceBranchLongName}"
            displayName: Get Branch Name

          - task: CmdLine@2
            displayName: "Set Git Config"
            inputs:
               script: |
                 git config --global user.email "sfpowerkit.ci@dev.azure.com"
                 git config --global user.name "sfpowerkitci"


          - task: CmdLine@2
            displayName: 'Checkout the current version of the branch'
            condition: eq( ${{ parameters.publish }},true)
            inputs:
                 script: |
                  git checkout $(fullbranchname)
                 workingDirectory: '$(System.DefaultWorkingDirectory)'


          - task: Cache@2
            displayName: Cache NPM Modules
            inputs:
              key: 'npm | "$(Agent.OS)"  | package-lock.json'
              path: '$(System.DefaultWorkingDirectory)/node_modules'
              cacheHitVar: 'npm | "$(Agent.OS)"'

          - task: DownloadSecureFile@1
            displayName: 'Download secure file .npmrc'
            name: npmrc
            inputs:
                secureFile: '8abaf6dc-ff2e-427a-971b-a98cbd48af34' # Need to change this


          - task: CmdLine@2
            displayName: "Copy npmrc file to packages"
            inputs:
              script: |
               copy $(npmrc.secureFilePath)  $(System.DefaultWorkingDirectory)\.npmrc
               copy $(npmrc.secureFilePath)  $(System.DefaultWorkingDirectory)\packages\core\.npmrc
               copy $(npmrc.secureFilePath)  $(System.DefaultWorkingDirectory)\packages\sfpowerscripts-cli\.npmrc

          - task: Npm@1
            displayName: 'npm install'
            inputs:
              verbose: false
              customEndpoint: npm

          - task: npmAuthenticate@0
            displayName: 'npm Authenticate .npmrc'
            inputs:
                workingFile: .npmrc
                customEndpoint: npm

          - task: npmAuthenticate@0
            displayName: 'npm Authenticate packages/core/.npmrc'
            inputs:
                workingFile: packages/core/.npmrc
                customEndpoint: npm

          - task: npmAuthenticate@0
            displayName: 'npm Authenticate packages/sfpowerscripts-cli/.npmrc'
            inputs:
                workingFile: 'packages/sfpowerscripts-cli/.npmrc'
                customEndpoint: npm


          - script: 'npx lerna bootstrap'
            displayName: 'Bootstrap Lerna'


          - script: 'npx lerna run build'
            displayName: 'Build  All  Packages'


          - task: CmdLine@2
            displayName: 'Publish CLI/Core'
            condition: and( eq( ${{ parameters.publish }},true), or( eq( '${{ parameters.version }}','alpha'), eq( '${{ parameters.version }}','beta')) )
            inputs:
                 script: 'lerna publish from-package --yes --force-publish --no-git-tag-version --no-push --dist-tag ${{ parameters.version }}'
                 workingDirectory: '$(System.DefaultWorkingDirectory)'

          - task: CmdLine@2
            displayName: 'Publish CLI/Core'
            condition: and( eq( ${{ parameters.publish }},true), eq( '${{ parameters.version }}','prod'))
            inputs:
                 script: 'lerna publish from-package --yes --force-publish --no-git-tag-version --no-push --dist-tag latest'
                 workingDirectory: '$(System.DefaultWorkingDirectory)'
