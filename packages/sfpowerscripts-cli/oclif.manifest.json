{"version":"1.4.5","commands":{"sfpowerscripts:analyze:pmd":{"id":"sfpowerscripts:analyze:pmd","description":"This task is used to run a static analysis of the apex classes and triggers using PMD, Please ensure that the SFDX CLI and sfpowerkit plugin are installed before using this task","usage":"<%= command.id %> [--sourcedir <string>] [--ruleset <string>] [--rulesetpath <string>] [--format <string>] [-o <string>] [--version <string>] [-b] [--refname <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]","pluginName":"@dxatscale/sfpowerscripts","pluginType":"core","aliases":[],"examples":["$ sfdx sfpowerscripts:analyze:pmd -b\n","Output variable:","sfpowerscripts_pmd_output_path","<refname>_sfpowerscripts_pmd_output_path"],"flags":{"json":{"name":"json","type":"boolean","description":"format output as json","allowNo":false},"loglevel":{"name":"loglevel","type":"option","description":"logging level for this command invocation","required":false,"helpValue":"(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)","options":["trace","debug","info","warn","error","fatal","TRACE","DEBUG","INFO","WARN","ERROR","FATAL"],"default":"warn"},"sourcedir":{"name":"sourcedir","type":"option","description":"The directory that is to be analzed using PMD, If omitted default project diretory as mentioned in sfdx-project.json will be used"},"ruleset":{"name":"ruleset","type":"option","description":"Inbuilt is the default ruleset that comes with the task, If you choose custom, please provide the path to the ruleset","options":["sfpowerkit","Custom"],"default":"sfpowerkit"},"rulesetpath":{"name":"rulesetpath","type":"option","description":"The path to the ruleset if you are utilizing your own ruleset"},"format":{"name":"format","type":"option","description":"https://pmd.github.io/latest/pmd_userdocs_cli_reference.html#available-report-formats","options":["text","textcolor","csv","emacs","summaryhtml","html","xml","xslt","yahtml","vbhtml","textpad"],"default":"text"},"outputpath":{"name":"outputpath","type":"option","char":"o","description":"The file to which the output for static analysis will be written"},"version":{"name":"version","type":"option","description":"The version of PMD to be used for static analysis","default":"6.26.0"},"istobreakbuild":{"name":"istobreakbuild","type":"boolean","char":"b","description":"Enable this option if the build should be reported as failure if 1 or more critical defects are reported during the analysis","allowNo":false},"refname":{"name":"refname","type":"option","description":"Reference name to be prefixed to output variables"}},"args":[]},"sfpowerscripts:apextests:trigger":{"id":"sfpowerscripts:apextests:trigger","description":"Triggers Apex unit test in an org. Supports test level RunAllTestsInPackage, which optionally allows validation of individual class code coverage","usage":"<%= command.id %> [-u <string>] [-l <string>] [-n <string>] [-c] [--validatepackagecoverage] [-s] [--specifiedtests <string>] [--apextestsuite <string>] [-p <integer>] [--waittime <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]","pluginName":"@dxatscale/sfpowerscripts","pluginType":"core","aliases":[],"examples":["$ sfdx sfpowerscripts:apextests:trigger -u scratchorg -l RunLocalTests -s","$ sfdx sfpowerscripts:apextests:trigger -u scratchorg -l RunAllTestsInPackage -n <mypackage> -c"],"flags":{"json":{"name":"json","type":"boolean","description":"format output as json","allowNo":false},"loglevel":{"name":"loglevel","type":"option","description":"logging level for this command invocation","required":false,"helpValue":"(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)","options":["trace","debug","info","warn","error","fatal","TRACE","DEBUG","INFO","WARN","ERROR","FATAL"],"default":"warn"},"targetorg":{"name":"targetorg","type":"option","char":"u","description":"username or alias for the target org; overrides default target org","default":"scratchorg"},"testlevel":{"name":"testlevel","type":"option","char":"l","description":"The test level of the test that need to be executed when the code is to be deployed","options":["RunSpecifiedTests","RunApexTestSuite","RunLocalTests","RunAllTestsInOrg","RunAllTestsInPackage"],"default":"RunLocalTests"},"package":{"name":"package","type":"option","char":"n","description":"Name of the package to run tests. Required when test level is RunAllTestsInPackage","required":false},"validateindividualclasscoverage":{"name":"validateindividualclasscoverage","type":"boolean","char":"c","description":"Validate that individual classes have a coverage greater than the minimum required percentage coverage, only available when test level is RunAllTestsInPackage","allowNo":false},"validatepackagecoverage":{"name":"validatepackagecoverage","type":"boolean","description":"Validate that the package coverage is greater than the minimum required percentage coverage, only available when test level is RunAllTestsInPackage","allowNo":false},"synchronous":{"name":"synchronous","type":"boolean","char":"s","description":"Select an option if the tests are to be run synchronously","allowNo":false},"specifiedtests":{"name":"specifiedtests","type":"option","description":"comma-separated list of Apex test class names or IDs and, if applicable, test methods to run"},"apextestsuite":{"name":"apextestsuite","type":"option","description":"comma-separated list of Apex test suite names to run"},"coveragepercent":{"name":"coveragepercent","type":"option","char":"p","description":"Minimum required percentage coverage, when validating code coverage","default":75},"waittime":{"name":"waittime","type":"option","description":"wait time for command to finish in minutes","default":"60"}},"args":[]},"sfpowerscripts:apextests:validate":{"id":"sfpowerscripts:apextests:validate","description":"Validates apex test coverage in the org, Please ensure that the SFDX CLI and sfpowerkit plugin are installed before using this task.","usage":"<%= command.id %> -t <string> [-u <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]","pluginName":"@dxatscale/sfpowerscripts","pluginType":"core","aliases":[],"examples":["$ sfdx sfpowerscripts:apextests:validate -u scratchorg -t 80"],"flags":{"json":{"name":"json","type":"boolean","description":"format output as json","allowNo":false},"loglevel":{"name":"loglevel","type":"option","description":"logging level for this command invocation","required":false,"helpValue":"(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)","options":["trace","debug","info","warn","error","fatal","TRACE","DEBUG","INFO","WARN","ERROR","FATAL"],"default":"warn"},"targetorg":{"name":"targetorg","type":"option","char":"u","description":"Alias or username of the target org","default":"scratchorg"},"testcoverage":{"name":"testcoverage","type":"option","char":"t","description":"The percentage of test coverage for apex clasess, that should be as per the last test run status","required":true}},"args":[]},"sfpowerscripts:changelog:generate":{"id":"sfpowerscripts:changelog:generate","description":"[BETA] Generates release changelog, providing a summary of artifact versions, work items and commits introduced in a release. Creates a release definition based on artifacts contained in the artifact directory, and compares it to previous release definition in changelog stored on a source repository","usage":"<%= command.id %> -d <directory> -n <string> -w <string> -r <string> -b <string> [--limit <integer>] [--workitemurl <string>] [--showallartifacts] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]","pluginName":"@dxatscale/sfpowerscripts","pluginType":"core","aliases":[],"examples":["$ sfdx sfpowerscripts:changelog:generate -n <releaseName> -d path/to/artifact/directory -w <regexp> -r <repoURL> -b <branchName> "],"flags":{"json":{"name":"json","type":"boolean","description":"format output as json","allowNo":false},"loglevel":{"name":"loglevel","type":"option","description":"logging level for this command invocation","required":false,"helpValue":"(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)","options":["trace","debug","info","warn","error","fatal","TRACE","DEBUG","INFO","WARN","ERROR","FATAL"],"default":"warn"},"limit":{"name":"limit","type":"option","description":"limit the number of releases to display in changelog markdown"},"artifactdir":{"name":"artifactdir","type":"option","char":"d","description":"Directory containing sfpowerscripts artifacts","required":true,"default":"artifacts"},"releasename":{"name":"releasename","type":"option","char":"n","description":"Name of the release for which to generate changelog","required":true},"workitemfilter":{"name":"workitemfilter","type":"option","char":"w","description":"Regular expression used to search for work items (user stories) introduced in release","required":true},"workitemurl":{"name":"workitemurl","type":"option","description":"Generic URL for work items. Each work item ID will be appended to the URL, providing quick access to work items","required":false},"repourl":{"name":"repourl","type":"option","char":"r","description":"Repository in which the changelog files are located. Assumes user is already authenticated.","required":true},"branchname":{"name":"branchname","type":"option","char":"b","description":"Repository branch in which the changelog files are located","required":true},"showallartifacts":{"name":"showallartifacts","type":"boolean","description":"Show all artifacts in changelog markdown, including those that have not changed in the release","required":false,"allowNo":false},"forcepush":{"name":"forcepush","type":"boolean","description":"Force push changes to the repository branch","hidden":true,"allowNo":false}},"args":[]},"sfpowerscripts:orchestrator:build":{"id":"sfpowerscripts:orchestrator:build","description":"Build all packages (unlocked/source/data) in a repo in parallel, respecting the dependency of each packages and generate artifacts to a provided directory","usage":"<%= command.id %> [--diffcheck] [--gittag] [-r <string>] [-f <filepath>] [--artifactdir <directory>] [--waittime <number>] [--buildnumber <number>] [--executorcount <number>] [--branch <string>] [--tag <string>] [-v <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]","pluginName":"@dxatscale/sfpowerscripts","pluginType":"core","aliases":[],"flags":{"json":{"name":"json","type":"boolean","description":"format output as json","allowNo":false},"loglevel":{"name":"loglevel","type":"option","description":"logging level for this command invocation","required":false,"helpValue":"(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)","options":["trace","debug","info","warn","error","fatal","TRACE","DEBUG","INFO","WARN","ERROR","FATAL"],"default":"warn"},"targetdevhubusername":{"name":"targetdevhubusername","type":"option","char":"v","description":"username or alias for the dev hub org; overrides default dev hub org"},"apiversion":{"name":"apiversion","type":"option","description":"override the api version used for api requests made by this command"},"diffcheck":{"name":"diffcheck","type":"boolean","description":"Only build the packages which have changed by analyzing previous tags","allowNo":false},"gittag":{"name":"gittag","type":"boolean","description":"Tag the current commit ID with an annotated tag containing the package name and version - does not push tag","allowNo":false},"repourl":{"name":"repourl","type":"option","char":"r","description":"Custom source repository URL to use in artifact metadata, overrides origin URL defined in git config"},"configfilepath":{"name":"configfilepath","type":"option","char":"f","description":"Path in the current project directory containing  config file for the packaging org","default":"config/project-scratch-def.json"},"artifactdir":{"name":"artifactdir","type":"option","description":"The directory where the generated artifact is to be written","default":"artifacts"},"waittime":{"name":"waittime","type":"option","description":"Wait time for command to finish in minutes","default":120},"buildnumber":{"name":"buildnumber","type":"option","description":"The build number to be used for source packages, Unlocked Packages will be assigned the buildnumber from Saleforce directly if using .NEXT","default":1},"executorcount":{"name":"executorcount","type":"option","description":"Number of parallel package task schedulors","default":5},"branch":{"name":"branch","type":"option","description":"The git branch that this build is triggered on, Useful for metrics and general identification purposes"},"tag":{"name":"tag","type":"option","description":"Tag the build with a label, useful to identify in metrics"}},"args":[]},"sfpowerscripts:orchestrator:deploy":{"id":"sfpowerscripts:orchestrator:deploy","description":"Deploy packages from the provided aritfact directory, to a given org, using the order and configurable flags provided in sfdx-project.json","usage":"<%= command.id %> -u <string> [--artifactdir <directory>] [--waittime <number>] [-g <array>] [-t <string>] [--skipifalreadyinstalled] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]","pluginName":"@dxatscale/sfpowerscripts","pluginType":"core","aliases":[],"examples":["$ sfdx sfpowerscripts:orchestrator:deploy -u <username>"],"flags":{"json":{"name":"json","type":"boolean","description":"format output as json","allowNo":false},"loglevel":{"name":"loglevel","type":"option","description":"logging level for this command invocation","required":false,"helpValue":"(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)","options":["trace","debug","info","warn","error","fatal","TRACE","DEBUG","INFO","WARN","ERROR","FATAL"],"default":"warn"},"targetorg":{"name":"targetorg","type":"option","char":"u","description":"Alias/User Name of the target environment","required":true,"default":"scratchorg"},"artifactdir":{"name":"artifactdir","type":"option","description":"The directory containing artifacts to be deployed","default":"artifacts"},"waittime":{"name":"waittime","type":"option","description":"Wait time for command to finish in minutes","default":120},"logsgroupsymbol":{"name":"logsgroupsymbol","type":"option","char":"g","description":"Symbol used by CICD platform to group/collapse logs in the console. Provide an opening group, and an optional closing group symbol."},"tag":{"name":"tag","type":"option","char":"t","description":"Tag the deploy with a label, useful for identification in metrics"},"skipifalreadyinstalled":{"name":"skipifalreadyinstalled","type":"boolean","description":"Skip the package installation if the package is already installed in the org","required":false,"allowNo":false}},"args":[]},"sfpowerscripts:orchestrator:prepare":{"id":"sfpowerscripts:orchestrator:prepare","description":"Prepare a pool of scratchorgs with all the packages upfront, so that any incoming change can be validated in an optimized manner","usage":"<%= command.id %> -t <string> [-e <number>] [-m <number>] [-f <filepath>] [--installassourcepackages --installall] [-s <filepath>] [--succeedondeploymenterrors] [--keys <string>] [-v <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]","pluginName":"@dxatscale/sfpowerscripts","pluginType":"core","aliases":[],"examples":["$ sfdx sfpowerscripts:orchestrator:prepare -t CI_1  -v <devhub>"],"flags":{"json":{"name":"json","type":"boolean","description":"format output as json","allowNo":false},"loglevel":{"name":"loglevel","type":"option","description":"logging level for this command invocation","required":false,"helpValue":"(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)","options":["trace","debug","info","warn","error","fatal","TRACE","DEBUG","INFO","WARN","ERROR","FATAL"],"default":"warn"},"targetdevhubusername":{"name":"targetdevhubusername","type":"option","char":"v","description":"username or alias for the dev hub org; overrides default dev hub org"},"apiversion":{"name":"apiversion","type":"option","description":"API version to be used"},"tag":{"name":"tag","type":"option","char":"t","description":"The name/tag of the scratch org pool","required":true},"expiry":{"name":"expiry","type":"option","char":"e","description":"Expiry of the scratch org's created in the pool","required":false,"default":2},"maxallocation":{"name":"maxallocation","type":"option","char":"m","description":"The size of the scratch org pool to be created","required":false,"default":10},"config":{"name":"config","type":"option","char":"f","description":"The file path to the definition file for the scratch org shape","required":false,"default":"config/project-scratch-def.json"},"installall":{"name":"installall","type":"boolean","description":"Install the dependencies,along with all the packages in the repo","required":false,"allowNo":false},"installassourcepackages":{"name":"installassourcepackages","type":"boolean","description":"Install all the unlocked packages as Source Packages","required":false,"allowNo":false},"artifactfetchscript":{"name":"artifactfetchscript","type":"option","char":"s","description":"The path to the script file that is used to fetch the validated artifacts to be used in the prepare command","required":false},"succeedondeploymenterrors":{"name":"succeedondeploymenterrors","type":"boolean","description":"Do not fail the scratch orgs, if a package failed to deploy, return the scratch org with packages till the last failure","required":false,"allowNo":false},"keys":{"name":"keys","type":"option","description":"Keys to be used while installing any managed package dependent","required":false},"batchsize":{"name":"batchsize","type":"option","description":"Number of parallel executors to be used while creating the pool","hidden":true,"required":false,"default":10}},"args":[]},"sfpowerscripts:orchestrator:promote":{"id":"sfpowerscripts:orchestrator:promote","description":"Promotes validated unlocked packages with code coverage greater than 75%","usage":"<%= command.id %> -d <directory> [-v <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]","pluginName":"@dxatscale/sfpowerscripts","pluginType":"core","aliases":[],"examples":["$ sfdx sfpowerscripts:orchestrator:promote -d path/to/artifacts -v <org>"],"flags":{"json":{"name":"json","type":"boolean","description":"format output as json","allowNo":false},"loglevel":{"name":"loglevel","type":"option","description":"logging level for this command invocation","required":false,"helpValue":"(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)","options":["trace","debug","info","warn","error","fatal","TRACE","DEBUG","INFO","WARN","ERROR","FATAL"],"default":"warn"},"artifactdir":{"name":"artifactdir","type":"option","char":"d","description":"The directory where artifacts are located","required":true,"default":"artifacts"},"devhubalias":{"name":"devhubalias","type":"option","char":"v","description":"Provide the alias of the devhub previously authenticated, default value is HubOrg if using the Authenticate Devhub task","default":"HubOrg"}},"args":[]},"sfpowerscripts:orchestrator:publish":{"id":"sfpowerscripts:orchestrator:publish","description":"Publish packages to an artifact registry, using a user-provided script that is responsible for authenticating & uploading to the registry.","usage":"<%= command.id %> -d <directory> -f <filepath> [-p -v <string>] [-t <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]","pluginName":"@dxatscale/sfpowerscripts","pluginType":"core","aliases":[],"examples":["$ sfdx sfpowerscripts:orchestrator:publish -f path/to/script","$ sfdx sfpowerscripts:orchestrator:publish -p -v HubOrg"],"flags":{"json":{"name":"json","type":"boolean","description":"format output as json","allowNo":false},"loglevel":{"name":"loglevel","type":"option","description":"logging level for this command invocation","required":false,"helpValue":"(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)","options":["trace","debug","info","warn","error","fatal","TRACE","DEBUG","INFO","WARN","ERROR","FATAL"],"default":"warn"},"artifactdir":{"name":"artifactdir","type":"option","char":"d","description":"The directory containing artifacts to be published","required":true,"default":"artifacts"},"publishpromotedonly":{"name":"publishpromotedonly","type":"boolean","char":"p","description":"Only publish unlocked packages that have been promoted","allowNo":false},"devhubalias":{"name":"devhubalias","type":"option","char":"v","description":"Provide the alias of the devhub previously authenticated"},"scriptpath":{"name":"scriptpath","type":"option","char":"f","description":"Path to script that authenticates and uploaded artifacts to the registry","required":true},"tag":{"name":"tag","type":"option","char":"t","description":"Tag the publish with a label, useful for identification in metrics"}},"args":[]},"sfpowerscripts:orchestrator:quickbuild":{"id":"sfpowerscripts:orchestrator:quickbuild","description":"Build all packages (unlocked/source/data) in a repo in parallel, respecting the dependency of each packages and generate artifacts to a provided directory without validating individual dependencies","usage":"<%= command.id %> [--diffcheck] [--gittag] [-r <string>] [-f <filepath>] [--artifactdir <directory>] [--waittime <number>] [--buildnumber <number>] [--executorcount <number>] [--branch <string>] [--tag <string>] [-v <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]","pluginName":"@dxatscale/sfpowerscripts","pluginType":"core","aliases":[],"flags":{"json":{"name":"json","type":"boolean","description":"format output as json","allowNo":false},"loglevel":{"name":"loglevel","type":"option","description":"logging level for this command invocation","required":false,"helpValue":"(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)","options":["trace","debug","info","warn","error","fatal","TRACE","DEBUG","INFO","WARN","ERROR","FATAL"],"default":"warn"},"targetdevhubusername":{"name":"targetdevhubusername","type":"option","char":"v","description":"username or alias for the dev hub org; overrides default dev hub org"},"apiversion":{"name":"apiversion","type":"option","description":"override the api version used for api requests made by this command"},"diffcheck":{"name":"diffcheck","type":"boolean","description":"Only build the packages which have changed by analyzing previous tags","allowNo":false},"gittag":{"name":"gittag","type":"boolean","description":"Tag the current commit ID with an annotated tag containing the package name and version - does not push tag","allowNo":false},"repourl":{"name":"repourl","type":"option","char":"r","description":"Custom source repository URL to use in artifact metadata, overrides origin URL defined in git config"},"configfilepath":{"name":"configfilepath","type":"option","char":"f","description":"Path in the current project directory containing  config file for the packaging org","default":"config/project-scratch-def.json"},"artifactdir":{"name":"artifactdir","type":"option","description":"The directory where the generated artifact is to be written","default":"artifacts"},"waittime":{"name":"waittime","type":"option","description":"Wait time for command to finish in minutes","default":120},"buildnumber":{"name":"buildnumber","type":"option","description":"The build number to be used for source packages, Unlocked Packages will be assigned the buildnumber from Saleforce directly if using .NEXT","default":1},"executorcount":{"name":"executorcount","type":"option","description":"Number of parallel package task schedulors","default":5},"branch":{"name":"branch","type":"option","description":"The git branch that this build is triggered on, Useful for metrics and general identification purposes"},"tag":{"name":"tag","type":"option","description":"Tag the build with a label, useful to identify in metrics"}},"args":[]},"sfpowerscripts:orchestrator:validate":{"id":"sfpowerscripts:orchestrator:validate","description":"Validate the incoming change against an earlier prepared scratchorg","usage":"<%= command.id %> -u <string> -p <array> -f <filepath> -i <string> [--shapefile <string>] [--coveragepercent <integer>] [-g <array>] [-x] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]","pluginName":"@dxatscale/sfpowerscripts","pluginType":"core","aliases":[],"examples":["$ sfdx sfpowerscripts:orchestrator:validate -p \"POOL_TAG_1,POOL_TAG_2\" -u <devHubUsername> -i <clientId> -f <jwt_file>"],"flags":{"json":{"name":"json","type":"boolean","description":"format output as json","allowNo":false},"loglevel":{"name":"loglevel","type":"option","description":"logging level for this command invocation","required":false,"helpValue":"(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)","options":["trace","debug","info","warn","error","fatal","TRACE","DEBUG","INFO","WARN","ERROR","FATAL"],"default":"warn"},"devhubusername":{"name":"devhubusername","type":"option","char":"u","description":"Authentication username for Dev Hub","required":true},"pools":{"name":"pools","type":"option","char":"p","description":"Fetch scratch-org validation environment from one of listed pools, sequentially","required":true},"jwtkeyfile":{"name":"jwtkeyfile","type":"option","char":"f","description":"Path to a file containing the private key","required":true},"clientid":{"name":"clientid","type":"option","char":"i","description":"OAuth client ID, also known as the consumer key","required":true},"shapefile":{"name":"shapefile","type":"option","description":"Path to .zip file of scratch org shape / metadata to deploy"},"coveragepercent":{"name":"coveragepercent","type":"option","description":"Minimum required percentage coverage for validating code coverage of packages with Apex classes","default":75},"logsgroupsymbol":{"name":"logsgroupsymbol","type":"option","char":"g","description":"Symbol used by CICD platform to group/collapse logs in the console. Provide an opening group, and an optional closing group symbol."},"deletescratchorg":{"name":"deletescratchorg","type":"boolean","char":"x","description":"Delete scratch-org validation environment, after the command has finished running","allowNo":false}},"args":[]},"sfpowerscripts:package:incrementBuildNumber":{"id":"sfpowerscripts:package:incrementBuildNumber","description":"Increment the selected version counter by one and optionally commit changes to sfdx-project.json. This command does not push changes to the source repository","usage":"<%= command.id %> [--segment <string>] [-a -r <string>] [-n <string>] [-d <string>] [-c] [--refname <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]","pluginName":"@dxatscale/sfpowerscripts","pluginType":"core","aliases":[],"examples":["$ sfdx sfpowerscripts:package:incrementBuildNumber --segment BuildNumber -n packagename -c\n","Output variable:","sfpowerscripts_incremented_project_version","<refname>_sfpowerscripts_incremented_project_version"],"flags":{"json":{"name":"json","type":"boolean","description":"format output as json","allowNo":false},"loglevel":{"name":"loglevel","type":"option","description":"logging level for this command invocation","required":false,"helpValue":"(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)","options":["trace","debug","info","warn","error","fatal","TRACE","DEBUG","INFO","WARN","ERROR","FATAL"],"default":"warn"},"segment":{"name":"segment","type":"option","description":"Select the segment of the version","options":["Major","Minor","Patch","BuildNumber"],"default":"BuildNumber"},"appendbuildnumber":{"name":"appendbuildnumber","type":"boolean","char":"a","description":"Set the build segment of the version number to the build number rather than incremenenting","allowNo":false},"package":{"name":"package","type":"option","char":"n","description":"The name of the package of which the version need to be incremented,If not specified the default package is utilized"},"projectdir":{"name":"projectdir","type":"option","char":"d","description":"The directory should contain a sfdx-project.json for this command to succeed"},"commitchanges":{"name":"commitchanges","type":"boolean","char":"c","description":"Mark this if you want to commit the modified sfdx-project json, Please note this will not push to the repo only commits in the local checked out repo, You would need to have a push to the repo at the end of the packaging task if everything is successfull","allowNo":false},"refname":{"name":"refname","type":"option","description":"Reference name to be prefixed to output variables"},"runnumber":{"name":"runnumber","type":"option","char":"r","description":"The build number of the CI pipeline, usually available through an environment variable"}},"args":[]},"sfpowerscripts:pool:delete":{"id":"sfpowerscripts:pool:delete","description":"Deletes the pooled scratch orgs from the Scratch Org Pool","usage":"<%= command.id %> -t <string> [-m] [-i | -a] [-v <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]","pluginName":"@dxatscale/sfpowerscripts","pluginType":"core","aliases":[],"examples":["$ sfdx sfpowerscripts:pool:delete -t core ","$ sfdx sfpowerscripts:pool:delete -t core -v devhub"],"flags":{"json":{"name":"json","type":"boolean","description":"format output as json","allowNo":false},"loglevel":{"name":"loglevel","type":"option","description":"logging level for this command invocation","required":false,"helpValue":"(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)","options":["trace","debug","info","warn","error","fatal","TRACE","DEBUG","INFO","WARN","ERROR","FATAL"],"default":"warn"},"targetdevhubusername":{"name":"targetdevhubusername","type":"option","char":"v","description":"username or alias for the dev hub org; overrides default dev hub org"},"apiversion":{"name":"apiversion","type":"option","description":"override the api version used for api requests made by this command"},"tag":{"name":"tag","type":"option","char":"t","description":"tag used to identify the scratch org pool","required":true},"mypool":{"name":"mypool","type":"boolean","char":"m","description":"Filter only Scratch orgs created by current user in the pool","required":false,"allowNo":false},"allscratchorgs":{"name":"allscratchorgs","type":"boolean","char":"a","description":"Deletes all used and unused Scratch orgs from pool by the tag","required":false,"allowNo":false},"inprogressonly":{"name":"inprogressonly","type":"boolean","char":"i","description":"Deletes all In Progress Scratch orgs from pool by the tag","required":false,"allowNo":false}},"args":[]},"sfpowerscripts:pool:fetch":{"id":"sfpowerscripts:pool:fetch","description":"Gets an active/unused scratch org from the scratch org pool","usage":"<%= command.id %> -t <string> [-v <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]","pluginName":"@dxatscale/sfpowerscripts","pluginType":"core","aliases":[],"examples":["$ sfdx sfpowerkit:pool:fetch -t core ","$ sfdx sfpowerkit:pool:fetch -t core -v devhub","$ sfdx sfpowerkit:pool:fetch -t core -v devhub -m","$ sfdx sfpowerkit:pool:fetch -t core -v devhub -s testuser@test.com"],"flags":{"json":{"name":"json","type":"boolean","description":"format output as json","allowNo":false},"loglevel":{"name":"loglevel","type":"option","description":"logging level for this command invocation","required":false,"helpValue":"(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)","options":["trace","debug","info","warn","error","fatal","TRACE","DEBUG","INFO","WARN","ERROR","FATAL"],"default":"info"},"targetdevhubusername":{"name":"targetdevhubusername","type":"option","char":"v","description":"username or alias for the dev hub org; overrides default dev hub org"},"apiversion":{"name":"apiversion","type":"option","description":"override the api version used for api requests made by this command"},"tag":{"name":"tag","type":"option","char":"t","description":"(required) tag used to identify the scratch org pool","required":true}},"args":[]},"sfpowerscripts:pool:list":{"id":"sfpowerscripts:pool:list","description":"Retrieves a list of active scratch org and details from any pool. If this command is run with -m|--mypool, the command will retrieve the passwords for the pool created by the user who is executing the command.","usage":"<%= command.id %> [-t <string>] [-m] [-a] [-v <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]","pluginName":"@dxatscale/sfpowerscripts","pluginType":"core","aliases":[],"examples":["$ sfdx sfpowerscripts:pool:list -t core ","$ sfdx sfpowerscripts:pool:list -t core -v devhub","$ sfdx sfpowerscripts:pool:list -t core -v devhub -m","$ sfdx sfpowerscripts:pool:list -t core -v devhub -m -a"],"flags":{"json":{"name":"json","type":"boolean","description":"format output as json","allowNo":false},"loglevel":{"name":"loglevel","type":"option","description":"logging level for this command invocation","required":false,"helpValue":"(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)","options":["trace","debug","info","warn","error","fatal","TRACE","DEBUG","INFO","WARN","ERROR","FATAL"],"default":"warn"},"targetdevhubusername":{"name":"targetdevhubusername","type":"option","char":"v","description":"username or alias for the dev hub org; overrides default dev hub org"},"apiversion":{"name":"apiversion","type":"option","description":"override the api version used for api requests made by this command"},"tag":{"name":"tag","type":"option","char":"t","description":"tag used to identify the scratch org pool","required":false},"mypool":{"name":"mypool","type":"boolean","char":"m","description":"Filter the tag for any additions created  by the executor of the command","required":false,"allowNo":false},"allscratchorgs":{"name":"allscratchorgs","type":"boolean","char":"a","description":"Gets all used and unused Scratch orgs from pool","required":false,"allowNo":false}},"args":[]},"sfpowerscripts:source:deploy":{"id":"sfpowerscripts:source:deploy","description":"Deploy source to org using mdapi based deploy (converts source to mdapi and use mdapi deployment)","usage":"<%= command.id %> [-u <string>] [--sourcedir <string>] [--waittime <string>] [-c] [-f <string>] [-l <string>] [--specifiedtests <string>] [--apextestsuite <string>] [--ignorewarnings] [--ignoreerrors] [-b] [--refname <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]","pluginName":"@dxatscale/sfpowerscripts","pluginType":"core","aliases":[],"examples":["$ sfdx sfpowerscripts:source:deploy -u scratchorg --sourcedir force-app -c\n","Output variable:","sfpowerkit_deploysource_id","<refname_sfpowerkit_deploysource_id"],"flags":{"json":{"name":"json","type":"boolean","description":"format output as json","allowNo":false},"loglevel":{"name":"loglevel","type":"option","description":"logging level for this command invocation","required":false,"helpValue":"(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)","options":["trace","debug","info","warn","error","fatal","TRACE","DEBUG","INFO","WARN","ERROR","FATAL"],"default":"warn"},"targetorg":{"name":"targetorg","type":"option","char":"u","description":"Alias or username of the target org where the code should be deployed","default":"scratchorg"},"sourcedir":{"name":"sourcedir","type":"option","description":"The source directory to be deployed","default":"force-app"},"waittime":{"name":"waittime","type":"option","description":"wait time for command to finish in minutes","default":"20"},"checkonly":{"name":"checkonly","type":"boolean","char":"c","description":"Validate a deployment, but don't save to the org, Use this for Stage 1/2 CI Run's","allowNo":false},"validationignore":{"name":"validationignore","type":"option","char":"f","description":"Validation only deployment has issues with certain metadata such as apexttestsuite, create a different file similar to .forceignore and use it during validate only deployment","default":".forceignore"},"testlevel":{"name":"testlevel","type":"option","char":"l","description":"The test level of the test that need to be executed when the code is to be deployed","options":["NoTestRun","RunSpecifiedTests","RunApexTestSuite","RunLocalTests","RunAllTestsInOrg"],"default":"NoTestRun"},"specifiedtests":{"name":"specifiedtests","type":"option","description":"Specify a comma seperated values of Apex Test that need to be executed during this deployment"},"apextestsuite":{"name":"apextestsuite","type":"option","description":"Name of the Apex Test Suite that needs to be executed during this deployment"},"ignorewarnings":{"name":"ignorewarnings","type":"boolean","description":"Ignores any warnings generated during metadata deployment","allowNo":false},"ignoreerrors":{"name":"ignoreerrors","type":"boolean","description":"Ignores the deploy errors, and continues with the deploy operation","allowNo":false},"istobreakbuildifempty":{"name":"istobreakbuildifempty","type":"boolean","char":"b","description":"Uncheck this field, to allow for empty folders not to break build, useful in the case of pre/post step uniformity across projects","allowNo":false},"refname":{"name":"refname","type":"option","description":"Reference name to be prefixed to output variables"}},"args":[]},"sfpowerscripts:source:deployDestructiveManifest":{"id":"sfpowerscripts:source:deployDestructiveManifest","description":"Delete components in org according to destructive manifest - an empty package.xml will be automatically created, Read more about the task at  https://sfpowerscripts.com/tasks/deployment-tasks/deploy-destructive-maifest-to-an-org/","usage":"<%= command.id %> [-u <string>] [-m <string>] [-f <string> | -t <string>] [--skiponmissingmanifest] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]","pluginName":"@dxatscale/sfpowerscripts","pluginType":"core","aliases":[],"examples":["$ sfdx sfpowerscripts:source:deployDestructiveManifest -u scratchorg -m Text -t \"<?xml version=\"1.0\" encoding=\"UTF-8\"?>","<Package xmlns=\"http://soap.sforce.com/2006/04/metadata\"><types><members>myobject__c</members><name>CustomObject</name></types></Package>\""],"flags":{"json":{"name":"json","type":"boolean","description":"format output as json","allowNo":false},"loglevel":{"name":"loglevel","type":"option","description":"logging level for this command invocation","required":false,"helpValue":"(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)","options":["trace","debug","info","warn","error","fatal","TRACE","DEBUG","INFO","WARN","ERROR","FATAL"],"default":"warn"},"targetorg":{"name":"targetorg","type":"option","char":"u","description":"Alias or username of the target org where the code should be deployed","default":"scratchorg"},"method":{"name":"method","type":"option","char":"m","description":"If text is specified, add the members in the next field, if URL, pass in the location of the destructiveChanges.xml such as the raw git url","options":["Text","FilePath"],"default":"Text"},"destructivemanifesttext":{"name":"destructivemanifesttext","type":"option","char":"t","description":"Type in the destructive manifest, follow the instructions, https://developer.salesforce.com/docs/atlas.en-us.daas.meta/daas/daas_destructive_changes.htm"},"destructivemanifestfilepath":{"name":"destructivemanifestfilepath","type":"option","char":"f","description":"The location to the xml file which contains the destructive changes"},"skiponmissingmanifest":{"name":"skiponmissingmanifest","type":"boolean","description":"Skip if unable to find destructive manfiest file","allowNo":false}},"args":[]},"sfpowerscripts:package:data:create":{"id":"sfpowerscripts:package:data:create","description":"Creates a versioned artifact from a source directory containing SFDMU-based data (in csv format and export json). The artifact can be consumed by release pipelines, to deploy the data to orgs","usage":"<%= command.id %> -n <string> -v <string> [--artifactdir <directory>] [--diffcheck] [--branch <string>] [--gittag] [-r <string>] [--refname <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]","pluginName":"@dxatscale/sfpowerscripts","pluginType":"core","aliases":[],"examples":["$ sfdx sfpowerscripts:package:data:create -n mypackage -v <version>","$ sfdx sfpowerscripts:package:data:create -n <mypackage> -v <version> --diffcheck --gittag","Output variable:","sfpowerscripts_artifact_directory","<refname>_sfpowerscripts_artifact_directory","sfpowerscripts_package_version_number","<refname>_sfpowerscripts_package_version_number"],"flags":{"json":{"name":"json","type":"boolean","description":"format output as json","allowNo":false},"loglevel":{"name":"loglevel","type":"option","description":"logging level for this command invocation","required":false,"helpValue":"(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)","options":["trace","debug","info","warn","error","fatal","TRACE","DEBUG","INFO","WARN","ERROR","FATAL"],"default":"warn"},"package":{"name":"package","type":"option","char":"n","description":"The name of the package","required":true},"versionnumber":{"name":"versionnumber","type":"option","char":"v","description":"The format is major.minor.patch.buildnumber . This will override the build number mentioned in the sfdx-project.json, Try considering the use of Increment Version Number task before this task","required":true},"artifactdir":{"name":"artifactdir","type":"option","description":"The directory where the artifact is to be written","default":"artifacts"},"diffcheck":{"name":"diffcheck","type":"boolean","description":"Only build when the package has changed","allowNo":false},"branch":{"name":"branch","type":"option","description":"The git branch that this build is triggered on, Useful for metrics and general identification purposes"},"gittag":{"name":"gittag","type":"boolean","description":"Tag the current commit ID with an annotated tag containing the package name and version - does not push tag","allowNo":false},"repourl":{"name":"repourl","type":"option","char":"r","description":"Custom source repository URL to use in artifact metadata, overrides origin URL defined in git config"},"refname":{"name":"refname","type":"option","description":"Reference name to be prefixed to output variables"}},"args":[]},"sfpowerscripts:package:data:install":{"id":"sfpowerscripts:package:data:install","description":"Installs a SFDMU-based data package consisting of csvfiles and export.json to a target org","usage":"<%= command.id %> -n <string> -u <string> [--artifactdir <directory>] [-s] [--skipifalreadyinstalled] [--subdirectory <directory>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]","pluginName":"@dxatscale/sfpowerscripts","pluginType":"core","aliases":[],"examples":["$ sfdx sfpowerscripts:package:data:install -n mypackage -u <org>"],"flags":{"json":{"name":"json","type":"boolean","description":"format output as json","allowNo":false},"loglevel":{"name":"loglevel","type":"option","description":"logging level for this command invocation","required":false,"helpValue":"(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)","options":["trace","debug","info","warn","error","fatal","TRACE","DEBUG","INFO","WARN","ERROR","FATAL"],"default":"warn"},"package":{"name":"package","type":"option","char":"n","description":"Name of the package to be installed","required":true},"targetorg":{"name":"targetorg","type":"option","char":"u","description":"Alias/User Name of the target environment","required":true},"artifactdir":{"name":"artifactdir","type":"option","description":"The directory where the artifact is located","default":"artifacts"},"skiponmissingartifact":{"name":"skiponmissingartifact","type":"boolean","char":"s","description":"Skip package installation if the build artifact is missing. Enable this if artifacts are only being created for modified packages","allowNo":false},"skipifalreadyinstalled":{"name":"skipifalreadyinstalled","type":"boolean","description":"Skip the package installation if the package is already installed in the org","allowNo":false},"subdirectory":{"name":"subdirectory","type":"option","description":"Install specific subdirectory in the package. Useful when package consists of multiple discrete sub-packages"}},"args":[]},"sfpowerscripts:package:delta:create":{"id":"sfpowerscripts:package:delta:create","description":"This task is used to create a delta package between two commits and bundle the created delta as as a deployable artifact. Please ensure that the SFDX CLI and sfpowerkit plugin are installed before using this task","usage":"<%= command.id %> -r <string> -v <string> [-n <string>] [-t <string>] [--repourl <string>] [--branch <string>] [--artifactdir <directory>] [-x] [--refname <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]","pluginName":"@dxatscale/sfpowerscripts","pluginType":"core","aliases":[],"examples":["$ sfdx sfpowerscripts:package:delta:create -n <packagename> -r <61635fb> -t <3cf01b9> -v <version>\n","Output variable:","sfpowerscripts_delta_package_path","<refname>_sfpowerscripts_delta_package_path","sfpowerscripts_artifact_metadata_directory","<refname>_sfpowerscripts_artifact_metadata_directory","sfpowerscripts_artifact_directory","<refname>_sfpowerscripts_artifact_directory"],"flags":{"json":{"name":"json","type":"boolean","description":"format output as json","allowNo":false},"loglevel":{"name":"loglevel","type":"option","description":"logging level for this command invocation","required":false,"helpValue":"(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)","options":["trace","debug","info","warn","error","fatal","TRACE","DEBUG","INFO","WARN","ERROR","FATAL"],"default":"warn"},"package":{"name":"package","type":"option","char":"n","description":"The name of the package","required":false},"revisionfrom":{"name":"revisionfrom","type":"option","char":"r","description":"Provide the full SHA Commit ID, from where the diff should start generating","required":true},"revisionto":{"name":"revisionto","type":"option","char":"t","description":"If not set, the head commit ID of the current branch is used","default":"HEAD"},"versionname":{"name":"versionname","type":"option","char":"v","description":"Provide a meaningful name such as the default value, so this artifact can be identified in the release","required":true},"repourl":{"name":"repourl","type":"option","description":"Custom source repository URL to use in artifact metadata, overrides origin URL defined in git config"},"branch":{"name":"branch","type":"option","description":"The git branch that this build is triggered on, Useful for metrics and general identification purposes"},"artifactdir":{"name":"artifactdir","type":"option","description":"The directory where the artifact is to be written","default":"artifacts"},"generatedestructivemanifest":{"name":"generatedestructivemanifest","type":"boolean","char":"x","description":"Check this option to generate a destructive manifest to be deployed","allowNo":false},"refname":{"name":"refname","type":"option","description":"Reference name to be prefixed to output variables"}},"args":[]},"sfpowerscripts:package:source:create":{"id":"sfpowerscripts:package:source:create","description":"This task simulates a packaging experience similar to unlocked packaging - creating an artifact that consists of the metadata (e.g. commit Id), source code & an optional destructive manifest. The artifact can then be consumed by release pipelines, to deploy the package","usage":"<%= command.id %> -n <string> -v <string> [--artifactdir <directory>] [--diffcheck] [--branch <string>] [--gittag] [-r <string>] [--refname <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]","pluginName":"@dxatscale/sfpowerscripts","pluginType":"core","aliases":[],"examples":["$ sfdx sfpowerscripts:package:source:create -n mypackage -v <version>","$ sfdx sfpowerscripts:package:source:create -n <mypackage> -v <version> --diffcheck --gittag","Output variable:","sfpowerscripts_artifact_metadata_directory","<refname>_sfpowerscripts_artifact_metadata_directory","sfpowerscripts_artifact_directory","<refname>_sfpowerscripts_artifact_directory","sfpowerscripts_package_version_number","<refname>_sfpowerscripts_package_version_number"],"flags":{"json":{"name":"json","type":"boolean","description":"format output as json","allowNo":false},"loglevel":{"name":"loglevel","type":"option","description":"logging level for this command invocation","required":false,"helpValue":"(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)","options":["trace","debug","info","warn","error","fatal","TRACE","DEBUG","INFO","WARN","ERROR","FATAL"],"default":"warn"},"package":{"name":"package","type":"option","char":"n","description":"The name of the package","required":true},"versionnumber":{"name":"versionnumber","type":"option","char":"v","description":"The format is major.minor.patch.buildnumber . This will override the build number mentioned in the sfdx-project.json, Try considering the use of Increment Version Number task before this task","required":true},"artifactdir":{"name":"artifactdir","type":"option","description":"The directory where the artifact is to be written","default":"artifacts"},"diffcheck":{"name":"diffcheck","type":"boolean","description":"Only build when the package has changed","allowNo":false},"branch":{"name":"branch","type":"option","description":"The git branch that this build is triggered on, Useful for metrics and general identification purposes"},"gittag":{"name":"gittag","type":"boolean","description":"Tag the current commit ID with an annotated tag containing the package name and version - does not push tag","allowNo":false},"repourl":{"name":"repourl","type":"option","char":"r","description":"Custom source repository URL to use in artifact metadata, overrides origin URL defined in git config"},"refname":{"name":"refname","type":"option","description":"Reference name to be prefixed to output variables"}},"args":[]},"sfpowerscripts:package:source:install":{"id":"sfpowerscripts:package:source:install","description":"Installs a sfpowerscripts source package to the target org","usage":"<%= command.id %> -n <string> -u <string> [--artifactdir <directory>] [--skipifalreadyinstalled] [-s] [--subdirectory <directory>] [-o] [-t] [--waittime <string>] [--refname <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]","pluginName":"@dxatscale/sfpowerscripts","pluginType":"core","aliases":[],"examples":["$ sfdx sfpowerscripts:package:source:install -n mypackage -u <org>"],"flags":{"json":{"name":"json","type":"boolean","description":"format output as json","allowNo":false},"loglevel":{"name":"loglevel","type":"option","description":"logging level for this command invocation","required":false,"helpValue":"(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)","options":["trace","debug","info","warn","error","fatal","TRACE","DEBUG","INFO","WARN","ERROR","FATAL"],"default":"warn"},"package":{"name":"package","type":"option","char":"n","description":"Name of the package to be installed","required":true},"targetorg":{"name":"targetorg","type":"option","char":"u","description":"Alias/User Name of the target environment","required":true},"artifactdir":{"name":"artifactdir","type":"option","description":"The directory where the artifact is located","default":"artifacts"},"skipifalreadyinstalled":{"name":"skipifalreadyinstalled","type":"boolean","description":"Skip the package installation if the package is already installed in the org","allowNo":false},"skiponmissingartifact":{"name":"skiponmissingartifact","type":"boolean","char":"s","description":"Skip package installation if the build artifact is missing. Enable this if artifacts are only being created for modified packages","allowNo":false},"subdirectory":{"name":"subdirectory","type":"option","description":"Install specific subdirectory in the package. Useful when package consists of multiple discrete sub-packages"},"optimizedeployment":{"name":"optimizedeployment","type":"boolean","char":"o","description":"Optimize deployment by triggering test classes that are in the package, rather than using the whole tests in the org","required":false,"allowNo":false},"skiptesting":{"name":"skiptesting","type":"boolean","char":"t","description":"Skips running test when deploying to a sandbox","required":false,"allowNo":false},"waittime":{"name":"waittime","type":"option","description":"wait time for command to finish in minutes","default":"120"},"refname":{"name":"refname","type":"option","description":"Reference name to be prefixed to output variables"}},"args":[]},"sfpowerscripts:package:unlocked:create":{"id":"sfpowerscripts:package:unlocked:create","description":"Creates a new package version, and generates an artifact that consists of the metadata (e.g. version Id). The artifact can then be consumed by release pipelines, to install the unlocked package. Utilize this task in a package build for DX Unlocked Package","usage":"<%= command.id %> -n <string> [-b] [-k <string> | -x] [--diffcheck] [--gittag] [-r <string>] [--versionnumber <string>] [-f <filepath>] [--artifactdir <directory>] [--enablecoverage] [-s] [--branch <string>] [--tag <string>] [--waittime <string>] [--refname <string>] [-v <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]","pluginName":"@dxatscale/sfpowerscripts","pluginType":"core","aliases":[],"examples":["$ sfdx sfpowerscripts:package:unlocked:create -n <packagealias> -b -x -v <devhubalias> --refname <name>","$ sfdx sfpowerscripts:package:unlocked:create -n <packagealias> -b -x -v <devhubalias> --diffcheck --gittag\n","Output variable:","sfpowerscripts_package_version_id","<refname>_sfpowerscripts_package_version_id","sfpowerscripts_artifact_metadata_directory","<refname>_sfpowerscripts_artifact_metadata_directory","sfpowerscripts_artifact_directory","<refname>_sfpowerscripts_artifact_directory","sfpowerscripts_package_version_number","<refname>_sfpowerscripts_package_version_number"],"flags":{"json":{"name":"json","type":"boolean","description":"format output as json","allowNo":false},"loglevel":{"name":"loglevel","type":"option","description":"logging level for this command invocation","required":false,"helpValue":"(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)","options":["trace","debug","info","warn","error","fatal","TRACE","DEBUG","INFO","WARN","ERROR","FATAL"],"default":"warn"},"targetdevhubusername":{"name":"targetdevhubusername","type":"option","char":"v","description":"username or alias for the dev hub org; overrides default dev hub org"},"apiversion":{"name":"apiversion","type":"option","description":"override the api version used for api requests made by this command"},"package":{"name":"package","type":"option","char":"n","description":"ID (starts with 0Ho) or alias of the package to create a version of","required":true},"buildartifactenabled":{"name":"buildartifactenabled","type":"boolean","char":"b","description":"[DEPRECATED - always generate artifact] Create a build artifact, so that this pipeline can be consumed by a release pipeline","allowNo":false},"installationkey":{"name":"installationkey","type":"option","char":"k","description":"Installation key for this package"},"installationkeybypass":{"name":"installationkeybypass","type":"boolean","char":"x","description":"Bypass the requirement for having an installation key for this version of the package","allowNo":false},"diffcheck":{"name":"diffcheck","type":"boolean","description":"Only build when the package has changed","allowNo":false},"gittag":{"name":"gittag","type":"boolean","description":"Tag the current commit ID with an annotated tag containing the package name and version - does not push tag","allowNo":false},"repourl":{"name":"repourl","type":"option","char":"r","description":"Custom source repository URL to use in artifact metadata, overrides origin URL defined in git config"},"versionnumber":{"name":"versionnumber","type":"option","description":"The format is major.minor.patch.buildnumber . This will override the build number mentioned in the sfdx-project.json, Try considering the use of Increment Version Number task before this task"},"configfilepath":{"name":"configfilepath","type":"option","char":"f","description":"Path in the current project directory containing  config file for the packaging org","default":"config/project-scratch-def.json"},"artifactdir":{"name":"artifactdir","type":"option","description":"The directory where the artifact is to be written","default":"artifacts"},"enablecoverage":{"name":"enablecoverage","type":"boolean","description":"Please note this command takes a longer time to compute, activating this on every packaging build might not necessary","allowNo":false},"isvalidationtobeskipped":{"name":"isvalidationtobeskipped","type":"boolean","char":"s","description":"Skips validation of dependencies, package ancestors, and metadata during package version creation. Skipping validation reduces the time it takes to create a new package version, but package versions created without validation can’t be promoted.","allowNo":false},"branch":{"name":"branch","type":"option","description":"The git branch that this build is triggered on, Useful for metrics and general identification purposes"},"tag":{"name":"tag","type":"option","description":"the package version's tag"},"waittime":{"name":"waittime","type":"option","description":"wait time for command to finish in minutes","default":"120"},"refname":{"name":"refname","type":"option","description":"Reference name to be prefixed to output variables"}},"args":[]},"sfpowerscripts:package:unlocked:install":{"id":"sfpowerscripts:package:unlocked:install","description":"Installs an unlocked package using sfpowerscripts metadata","usage":"<%= command.id %> [-n <string>] [-u <string>] [-v <string> | -i] [-k <string>] [-a] [--artifactdir <directory>] [--securitytype <string>] [-f] [-s undefined] [--upgradetype <string>] [--waittime <string>] [--publishwaittime <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]","pluginName":"@dxatscale/sfpowerscripts","pluginType":"core","aliases":[],"examples":["$ sfdx sfpowerscripts:package:unlocked:install -n packagename -u sandboxalias -i"],"flags":{"json":{"name":"json","type":"boolean","description":"format output as json","allowNo":false},"loglevel":{"name":"loglevel","type":"option","description":"logging level for this command invocation","required":false,"helpValue":"(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)","options":["trace","debug","info","warn","error","fatal","TRACE","DEBUG","INFO","WARN","ERROR","FATAL"],"default":"warn"},"package":{"name":"package","type":"option","char":"n","description":"Name of the package to be installed"},"targetorg":{"name":"targetorg","type":"option","char":"u","description":"Alias/User Name of the target environment"},"packageinstalledfrom":{"name":"packageinstalledfrom","type":"boolean","char":"i","description":"automatically retrieve the version ID of the package to be installed, from the build artifact","allowNo":false},"packageversionid":{"name":"packageversionid","type":"option","char":"v","description":"manually input package version Id of the package to be installed"},"installationkey":{"name":"installationkey","type":"option","char":"k","description":"installation key for key-protected package"},"apexcompileonlypackage":{"name":"apexcompileonlypackage","type":"boolean","char":"a","description":"Each package installation triggers a compilation of apex, flag to trigger compilation of package only","allowNo":false},"artifactdir":{"name":"artifactdir","type":"option","description":"The directory where the artifact is located","default":"artifacts"},"securitytype":{"name":"securitytype","type":"option","description":"Select the security access for the package installation","options":["AllUsers","AdminsOnly"],"default":"AllUsers"},"skipifalreadyinstalled":{"name":"skipifalreadyinstalled","type":"boolean","char":"f","description":"Skip the package installation if the package is already installed in the org","allowNo":false},"skiponmissingartifact":{"name":"skiponmissingartifact","type":"boolean","char":"s","description":"Skip package installation if the build artifact is missing. Enable this if artifacts are only being created for modified packages","allowNo":false},"upgradetype":{"name":"upgradetype","type":"option","description":"the upgrade type for the package installation","options":["DeprecateOnly","Mixed","Delete"],"default":"Mixed"},"waittime":{"name":"waittime","type":"option","description":"wait time for command to finish in minutes","default":"120"},"publishwaittime":{"name":"publishwaittime","type":"option","description":"number of minutes to wait for subscriber package version ID to become available in the target org","default":"10"}},"args":[]}}}